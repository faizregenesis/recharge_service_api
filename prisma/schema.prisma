// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model experiences {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link_class             String
  icon_class             String
  icon_name              String
  menu_name              String
  information            String?
  active                 Boolean                  @default(true)
  mode_id                String?                  @db.Uuid
  pod_id                 String?                  @db.Uuid
  order_experience       Int?

  created_date           DateTime                 @default(now()) @db.Timestamptz(6)
  update_date            DateTime?                @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?                @db.Timestamp(6)
  @@index([id], map: "experience_idx")
}

model detail_experience {
  id                              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stroboscopic_light              Int?         @db.SmallInt
  audio_surround_sound            Int?         @db.SmallInt
  vibro_acoustics                 Int?         @db.SmallInt
  led_intensity                   Int?         @db.SmallInt
  led_color                       Int?         @db.SmallInt
  infra_red_nea_ir                Int?         @db.SmallInt
  infra_red_far_ir                Int?         @db.SmallInt
  pemf_therapy                    Boolean?
  olfactory_engagement            Boolean?
  binaural_beats_isochronic_tones Boolean?
  direct_neutral_stimulation      Boolean?
  duration                        Decimal      @db.Decimal(5, 2)
  experience_id                   String?      @db.Uuid
  song                            String?
  video                           String?
  lamp                            String?
  sound_scape                     Int?
  scent                           String?  
  order                           Int?
  order_experience                Int?

  created_at                      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at                      DateTime?   @db.Timestamptz(6)
  @@index([id], map: "detail_experience_idx")
}

model experiences_properties {
  id                     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  circle_line_color      String
  circle_line_width      Float
  circle_fill_color      String
  circle_icon            String
  circle_caption         String
  circle_size            Float
  enable_disable_session Boolean
  order                  Int         @db.SmallInt
  tooltip                String
  icon                   String?
  experience_id          String?      @db.Uuid

  created_at             DateTime    @default(now()) @db.Timestamptz(6)
  updated_at             DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?   @db.Timestamptz(6)
}

model user {
  user_id                       String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_names                    String
  username                      String?
  email                         String                          @unique
  password                      String
  is_test_user                  Boolean?                        @default(false)
  reset_token                   String?                         @db.VarChar(255)
  reset_token_expiration        DateTime?                       @db.Timestamp(6)
  deleted_at                    DateTime?                       @db.Timestamp(6)
  otp_verified                  Boolean?                        @default(false)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(6)

  rates                         rate[]                          @relation("UserRates")
  terms_and_conditions_accepted terms_and_conditions_accepted[]
  terms_and_conditions_answers  terms_and_conditions_answers[]

  @@index([user_id, username], map: "user_idx")
}

model rate {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  experience_id String?   @db.Uuid
  value         Int?
  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  fk_user_id    String?   @db.Uuid
  deleted_at    DateTime? @db.Timestamp(6)
  user          user?     @relation("UserRates", fields: [fk_user_id], references: [user_id])

  @@index([fk_user_id], map: "fk_user_idx")
  @@index([experience_id], map: "rate_experience_idx")
}

model terms_and_conditions_accepted {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fk_user_id    String    @db.Uuid
  accepted      Boolean   @default(false)
  accepted_date DateTime? @db.Timestamptz(6)
  created_date  DateTime  @default(now()) @db.Timestamptz(6)
  update_date   DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
  user          user      @relation(fields: [fk_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_foreign_key")

  @@index([id, fk_user_id], map: "terms_and_conditions_accepted_idx")
}

model terms_and_conditions_answers {
  id                             Int                            @id @default(autoincrement()) @db.SmallInt
  fk_user_id                     String                         @db.Uuid
  fk_question_id                 Int                            @db.SmallInt
  answer                         Boolean                        @default(false)
  answer_date                    DateTime                       @default(now()) @db.Timestamptz(6)
  deleted_at                     DateTime?                      @db.Timestamp(6)
  terms_and_conditions_questions terms_and_conditions_questions @relation(fields: [fk_question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question")
  user                           user                           @relation(fields: [fk_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model terms_and_conditions_questions {
  id                           Int                            @id @default(autoincrement()) @db.SmallInt
  question                     String
  information                  String?
  active                       Boolean                        @default(true)
  created_date                 DateTime                       @default(now()) @db.Timestamptz(6)
  update_date                  DateTime                       @default(now()) @db.Timestamptz(6)
  deleted_at                   DateTime?                      @db.Timestamp(6)
  terms_and_conditions_answers terms_and_conditions_answers[]
  matrix_user                  matrix_user[]

  @@index([id, active], map: "terms_and_conditions_questions_idx")
}

model self_development {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fk_pod_id             String?        @db.Uuid
  self_development_name String?
  description           String?
  icon                  String?
  order                 Int?

  created_date          DateTime?      @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?      @db.Timestamp(6)
}

model self_development_sound {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  self_development_id   String?           @db.Uuid

  sound_code            Int?
  duration              String?
  description           String?
  sound_path            String?
  file_path             String?
  title                 String?
  caption               String?
  self_dev_order        Int? 
  order                 Int?

  created_date          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?        @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?        @db.Timestamp(6)
}

model socket_topics {
  id                      String    @id(map: "socket_topic_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module_name             String?
  event_description       String?
  topic                   String?
  action                  String?
  retain                  Boolean?
  publish_example_value   Json?
  subscribe_example_value Json?
  value_range             String?
  remarks                 String?
  keyword                 String?
  auth_status             Boolean?

  deleted_at              DateTime? @db.Timestamp(6)
  created_date            DateTime  @default(now()) @db.Timestamptz(6)
  update_date             DateTime  @default(now()) @db.Timestamptz(6)

  @@index([id], map: "socket_topic_idx")
}

model pod_topics {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module_name             String?
  event_description       String?
  topic                   String?
  action                  String?
  retain                  Boolean?
  publish_example_value   Json?
  subscribe_example_value Json?
  value_range             String?
  remarks                 String?
  keyword                 String?

  pod_history             pod_history[]

  deleted_at              DateTime?     @db.Timestamp(6)
  created_date            DateTime      @default(now()) @db.Timestamptz(6)
  update_date             DateTime      @default(now()) @db.Timestamptz(6)

  @@index([id], map: "pod_topics_idx")
}

model pod_history {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fk_pod_topic_id String     @db.Uuid

  action          String?
  value           Json?

  pod_topics      pod_topics @relation(fields: [fk_pod_topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pod_topic_id")

  created_date    DateTime   @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?  @db.Timestamp(6)
  update_date     DateTime   @default(now()) @db.Timestamptz(6)

  @@index([id, fk_pod_topic_id], map: "pod_history_idx")
}

model template_properties {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  pod_id      String?   @db.Uuid

  code        String    @unique
  value       String
  description String

  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
}

model matrix_user {
  id                              String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fk_question_id                  Int                            @unique @db.SmallInt

  stroboscopic_light              Int                            @db.SmallInt
  audio_surround_sound            Int                            @db.SmallInt
  vibro_acoustics                 Int                            @db.SmallInt
  led_intensity                   Int                            @db.SmallInt
  led_color                       Int                            @db.SmallInt
  infra_red_nea_ir                Int                            @db.SmallInt
  infra_red_far_ir                Int                            @db.SmallInt
  pemf_therapy                    Boolean
  olfactory_engagement            Boolean
  binaural_beats_isochronic_tones Boolean
  direct_neutral_stimulation      Boolean
  duration                        Decimal?                        @db.Decimal(5, 2)
  song                            String?
  video                           String?
  terms_and_conditions_questions  terms_and_conditions_questions @relation(fields: [fk_question_id], references: [id])

  created_at                      DateTime                       @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime                       @default(now()) @db.Timestamptz(6)
  deleted_at                      DateTime?                      @db.Timestamptz(6)
}

model pod {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fk_firmware_version   String?                @db.Uuid
  fk_group_id           String?                @db.Uuid
  fk_app_version        String?                @db.Uuid
  fk_customer           String?                @db.Uuid

  code                  String?
  name                  String?
  url                   String?
  identification        String?
  ip_address            String?

  latitude              String?
  longitude             String?
  pod_version           String?
  server_version        String?
  mac_address_bluetooth String?            @unique 
  mac_address_pod       String?            @unique 
  soundcard_name        String?
  amplifier             String?
  start_deploy          DateTime? 
  serial_number         String?

  task                  task[]
  experiences2          experiences2[]
  node                  node[]
  // pod_history           pod_history[]
  // pod_logs              pod_logs[]
  // template_properties   template_properties[]
  self_development2     self_development2[]
  global_setting        global_setting2[]

  customer              customer?              @relation(fields: [fk_customer], references: [id])
  app_version           app_version?           @relation(fields: [fk_app_version], references: [id])
  firmware_version      firmware_version?      @relation(fields: [fk_firmware_version], references: [id])
  group                 group?                 @relation(fields: [fk_group_id], references: [id])

  created_date        DateTime              @default(now()) @db.Timestamptz(6)
  update_date         DateTime              @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?             @db.Timestamp(6)
  @@index([id], map: "pod_idx")
}

model experiences2 {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  mode_id                String?                  @db.Uuid
  pod_id                 String?                  @db.Uuid

  link_class             String?
  icon_class             String?
  icon_name              String?
  menu_name              String?
  information            String?
  active                 Boolean?                 @default(true)

  detail_experience2     detail_experience2[]

  pod                    pod?                     @relation(fields: [pod_id], references: [id])
  order_experience       Int?
  total_usage_time       Int?

  created_date           DateTime?                @default(now()) @db.Timestamptz(6)
  update_date            DateTime?                @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?                @db.Timestamp(6)
}

model detail_experience2 {
  id                              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stroboscopic_light              Int         @db.SmallInt
  audio_surround_sound            Int         @db.SmallInt
  vibro_acoustics                 Int         @db.SmallInt
  led_intensity                   Int         @db.SmallInt
  led_color                       Int         @db.SmallInt
  infra_red_nea_ir                Int         @db.SmallInt
  infra_red_far_ir                Int         @db.SmallInt
  pemf_therapy                    Boolean
  olfactory_engagement            Boolean
  binaural_beats_isochronic_tones Boolean
  direct_neutral_stimulation      Boolean
  duration                        Decimal     @db.Decimal(5, 2)
  experience_id                   String      @db.Uuid
  song                            String?
  video                           String?
  lamp                            String?
  sound_scape                     Int
  order                           Int?
  order_experience                Int?
  uva                             Int?
  uvb                             Int?
  uvc                             Int?
  pemf_value                      Int?

  scent                           String? 
  burst_time                      burst_time[]

  experiences                     experiences2 @relation(fields: [experience_id], references: [id])

  created_at                      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at                      DateTime?   @db.Timestamptz(6)
}

model burst_time {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time           String
  duration             String
  fk_detail_experience String?            @db.Uuid

  detail_experience2    detail_experience2? @relation(fields: [fk_detail_experience], references: [id])

  created_at           DateTime           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?          @db.Timestamptz(6)
}

enum firmware_version_status {
  active
  nonactive
}

model firmware_version {
  id                        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firmware_id               String?
  light_version             String? 
  chair_version             String? 
  olvactory_version         String? 
  manual_controll_version   String? 
  air_condition_version     String? 
  volume_controll_version   String? 
  door_version              String? 
  firmware_version_status   firmware_version_status @default(active)
  pod pod[]

  created_date          DateTime           @default(now()) @db.Timestamptz(6)
  update_date           DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?          @db.Timestamp(6)
}

model group {
  id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_name            String?            @unique
  pod pod[]

  
  created_date          DateTime           @default(now()) @db.Timestamptz(6)
  update_date           DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?          @db.Timestamp(6)
}

model customer {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address        String?
  description    String?
  phone          String?  @db.VarChar(15)

  pod pod[]

  created_date          DateTime           @default(now()) @db.Timestamptz(6)
  update_date           DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?          @db.Timestamp(6)
}

enum app_version_status {
  active
  nonactive
}

model app_version {
  description        String
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notes              String?
  version            String                 @unique
  pub_date           DateTime?

  app_version_status app_version_status         @default(active)
  pods               pod[]

  fk_version_big_screen    String      @db.Uuid
  fk_version_small_screen  String      @db.Uuid
  fk_version_mobile_api    String      @db.Uuid

  version_big_screen        version_big_screen @relation(fields: [fk_version_big_screen], references: [id])
  version_small_screen      version_small_screen @relation(fields: [fk_version_small_screen], references: [id])
  version_mobile_api        version_mobile_api @relation(fields: [fk_version_mobile_api], references: [id])

  created_date       DateTime               @default(now()) @db.Timestamptz(6)
  update_date        DateTime               @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?              @db.Timestamp(6)
}

model version_small_screen {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file                 String
  date_realese         DateTime    @default(now())
  signature            String?
  small_screen_version String?

  app_version        app_version[]

  created_date         DateTime    @default(now()) @db.Timestamptz(6)
  update_date          DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?   @db.Timestamp(6)
}

model version_big_screen {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file               String
  date_realese       DateTime?
  signature          String?
  big_screen_version String?

  app_version        app_version[]

  created_date       DateTime    @default(now()) @db.Timestamptz(6)
  update_date        DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?   @db.Timestamp(6)
}

model version_mobile_api {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file               String
  date_realese       DateTime    @default(now())
  signature          String?
  mobile_api_version String?

  app_version        app_version[]

  created_date       DateTime    @default(now()) @db.Timestamptz(6)
  update_date        DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?   @db.Timestamp(6)
}

model self_development2 {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  self_development_name String?
  description           String?
  icon                  String?
  fk_pod_id             String?        @db.Uuid
  is_explore            Boolean?
  order                 Int?

  pod                   pod?           @relation(fields: [fk_pod_id], references: [id])
  sounds                self_development_sound2[]

  created_date          DateTime?      @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?      @db.Timestamp(6)
}

model self_development_sound2 {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  self_development_id String?           @db.Uuid

  sound_code          Int?
  duration            String?
  description         String?
  sound_path          String?
  file_path           String?
  title               String?
  caption             String?
  self_dev_order      Int? 
  order               Int?
  video               String?
  total_usage_time    Int?

  self_development    self_development2?  @relation(fields: [self_development_id], references: [id])

  created_date          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?        @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?        @db.Timestamp(6)
}

model global_setting2 {
  id                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pod_id                 String?      @db.Uuid
  app_timeout            Int?
  default_volume         Int?
  pob_threshold          Int?
  pob_timeout_login      Int?
  pob_pitch_offset       Int?

  code_number            Int?
  rgb_value              String? 
  default_volume_tunnel  Int? 
  default_volume_guide   Int? 
  nir                    Int? 
  pemf                   Int? 
  uva_enable             Boolean      @default(false)
  uvb_enable             Boolean      @default(false)
  uvc_enable             Boolean      @default(false)

  dissable_full_mode     Boolean      @default(false) 
  session_mode           Boolean      @default(false)
  work_rest_play         Boolean      @default(false)
  self_develepment       Boolean      @default(false)
  demo_mode              Boolean      @default(false)

  dissable_lite_mode     Boolean      @default(false) 

  dissable_bluetooth     Boolean      @default(false) 

  fir_temprature         Int?
  idle_track_repeat      Boolean      @default(false) 
  idle_track_volume      Int?
  lamp_intensity         Int?
  led_aniation           Boolean      @default(false) 
  led_intentsity         Int?
  pod_pitch              Int?
  strobe_intensity       Int?
  temperature            Int?
  playing_track          Int?
  uva                    Int?
  uvb                    Int?
  uvc                    Int?
  vibration              Int?
  pod                    pod?         @relation(fields: [pod_id], references: [id])

  created_date           DateTime     @default(now()) @db.Timestamptz(6)
  update_date            DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?    @db.Timestamp(6)
}

model task {
  id                  String       @id             @default(uuid()) @db.Uuid
  task_type_id        String?      @db.Uuid
  pod_id              String?      @db.Uuid
  created_date        DateTime     @default(now()) @db.Timestamptz(6)
  update_date         DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?    @db.Timestamp(6)
  task_code           String?
  task_json           Json?
  template_style      Json? 
  informations        Json?
  sound_task_id       Json? 
  rgb_led             Json? 

  pod                 pod?         @relation(fields: [pod_id], references: [id])
  task_type           task_type?   @relation(fields: [task_type_id], references: [id])

  igniters            igniter[]    @relation("SoundTaskToIgniter")
  last_state          last_state[] @relation("SoundTaskToLastState")
}

model igniter {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code          String? 
  fk_task       String?      @db.Uuid

  task    task? @relation(fields: [fk_task], references: [id], name: "SoundTaskToIgniter")

  updated_date  DateTime?    @db.Timestamptz(6)
  created_date  DateTime?    @db.Timestamptz(6)
  deleted_at    DateTime?    @db.Timestamp(6)
}

model last_state {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code          String? 
  fk_task       String? @db.Uuid

  task          task?  @relation(fields: [fk_task], references: [id], name: "SoundTaskToLastState")

  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
}

model task_type {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                  String?
  name                  String?
  small_screen          String?
  big_screen            String?
  number_of_input       Int?
  number_of_output      Int?
  back                  Boolean?
  home                  Boolean?
  settings              Boolean?
  template_style        Json? 
  template_tooltips     Json? 

  updated_date          DateTime?    @db.Timestamptz(6)
  created_date          DateTime?    @db.Timestamptz(6)
  deleted_at            DateTime?    @db.Timestamp(6)

  task task[]
}

model tooltips {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content             String?
  detail_id           String?
  description         String?

  created_date        DateTime     @default(now()) @db.Timestamptz(6)
  update_date         DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?    @db.Timestamp(6)
}

model node {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String?
  label          String?
  type           String?
  position_x     Int?
  position_y     Int?
  inputs         String?
  pod_id         String?     @db.Uuid
  pob_state      Boolean?    @default(false)
  template_style Json? 

  nodes_output   nodes_output[]
  node_button    node_button[]
  connections    connections[]
  pod            pod?         @relation(fields: [pod_id], references: [id])

  updated_date   DateTime? @db.Timestamptz(6)
  created_date   DateTime? @db.Timestamptz(6)
  deleted_at     DateTime? @db.Timestamp(6)
}

model node_button {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  button_code   String?
  name          String? 
  output_number String? 
  fk_node_id    String?   @db.Uuid

  node          node?     @relation(fields: [fk_node_id], references: [id])

  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
}

model nodes_output {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nodes_code    String?
  side          String?
  class         String?
  fk_node_id    String?   @db.Uuid
  output_code   String? 

  node          node?     @relation(fields: [fk_node_id], references: [id])

  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
}

model connections {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  from          String?
  to            String?
  code          String?
  fk_node_id    String?   @db.Uuid

  node          node?     @relation(fields: [fk_node_id], references: [id])

  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
}

model imageData {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageurl      String? 
  imageName     String?   @unique

  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
}
